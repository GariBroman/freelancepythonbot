from pydoc import visiblename
from textwrap import dedent
from functools import partial

from django.core.management.base import BaseCommand
from environs import Env
from phonenumber_field.validators import (
    validate_international_phonenumber,
    ValidationError
)
from redis import Redis
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    Filters
)

import main.management.commands.db_processing as db


VISITOR_INLINE_KEYBOARD = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton(text='–ú–Ω–µ –Ω—É–∂–Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='new_customer')],
        [InlineKeyboardButton(text='–Ø —Å–∞–º —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='new_contractor')]

    ]
)
CUSTOMER_INLINE_KEYBOARD = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data='new_request')],
        [InlineKeyboardButton(text='–•–æ—á—É —Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º', callback_data='new_contractor')]
    ]
)


NEW_CONTRUCTOR_INLINE_KEYBOARD = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='fill_contractor_form')],
        [InlineKeyboardButton(text='–°–∫–æ–ª—å–∫–æ —è –±—É–¥—É –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å', callback_data='contractor_salary')],
        [InlineKeyboardButton(text='–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª', callback_data='cancel_new_contractor')]
    ]
)

CANCEL_INLINE = InlineKeyboardMarkup(
    [[
        InlineKeyboardButton(text="–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data='cancel_new_request')
    ]]
)


def delete_prev_inline(func, *args, **kwargs):
    def wrapper(*args, **kwargs):
        update, context = args[-2:]
        context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=update.callback_query.message.message_id,
        )
        return func(*args, **kwargs)
    return wrapper


def check_access(update: Update, context: CallbackContext) -> str:
    role = db.get_role(telegram_id=update.effective_chat.id)
    if role == 'admin':
        # send smth to admin

        return 'ADMIN'
    elif role == 'contractor':
        # send smth to contractor

        return 'CONTRACTOR'
    elif role == 'client':
        context.bot.send_message(
            update.effective_chat.id,
            text=dedent(
                """
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
                """
            ),
            reply_markup=CUSTOMER_INLINE_KEYBOARD
        )
        return 'CLIENT'
    
    # make smth with new user
    context.bot.send_message(
        update.effective_chat.id,
        text=dedent(
            """
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
            –Ø –ø–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
            """
        ),
        reply_markup=VISITOR_INLINE_KEYBOARD
    )
    return 'VISITOR'




@delete_prev_inline
def new_contractor(update: Update, context: CallbackContext) -> str:
    context.bot.send_message(
        update.effective_chat.id,
        text=dedent(
            """
            –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.
            –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä, –ø—Ä–æ–≤–µ–¥–µ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª–∏.
            """
        ),
        reply_markup=NEW_CONTRUCTOR_INLINE_KEYBOARD
    )
    return 'VISITOR'


@delete_prev_inline
def contractor_salary(update: Update, context: CallbackContext) -> str:
    context.bot.send_message(
        update.effective_chat.id,
        text='–í—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ú–ù–û–ì–û –î–ï–ù–ï–ì!!! üí∞üí∞üí∞',
        reply_markup=NEW_CONTRUCTOR_INLINE_KEYBOARD
    )
    return 'VISITOR'


@delete_prev_inline
def cancel_new_contractor(update: Update, context: CallbackContext) -> str:
    role = db.get_role(telegram_id=update.effective_chat.id)
    context.bot.send_message(
        update.effective_chat.id,
        text='–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ',
        reply_markup=VISITOR_INLINE_KEYBOARD
    )
    if role:
        return role.upper()
    return 'VISITOR'


@delete_prev_inline
def new_client(update: Update, context: CallbackContext) -> str:
    username = update.effective_chat.first_name or update.effective_chat.username or update.effective_chat.last_name
    db.create_client(telegram_id=update.effective_chat.id, username=username)
    context.bot.send_message(
        update.effective_chat.id,
        text=dedent(
            """
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            """
        ),
        reply_markup=CUSTOMER_INLINE_KEYBOARD
    )
    return 'CLIENT'


@delete_prev_inline
def new_request(update: Update, context: CallbackContext) -> str:
    context.bot.send_message(
        update.effective_chat.id,
        text=dedent(
            """
            –û–ø–∏—à–∏—Ç–µ —Ç–µ–∑–∏—Å–Ω–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.

            ! –£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤.
            """
        ),
        reply_markup=CANCEL_INLINE
    )
    return 'CLIENT'


def client_message(redis: Redis, update: Update, context: CallbackContext) -> str:
    if len(update.message.text) > 1000:
        context.bot.send_message(
            update.effective_chat.id,
            text=dedent(
                """
                –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤.

                ! –£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤.
                """
            ),
            reply_markup=CANCEL_INLINE
        )
        return 'CLIENT'

    if redis.get(f'{update.effective_chat.id}_message'):
        return enter_phone(redis=redis, update=update, context=context)

    redis.set(f'{update.effective_chat.id}_message', update.message.text)
    
    if not db.is_client_phone(telegram_id=update.effective_chat.id): 
        context.bot.send_message(
            update.effective_chat.id,
            text=dedent(
                """
                –û—Å—Ç–∞–ª–∞—Å—å –Ω–µ–±–æ–ª—å—à–∞—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å.

                –ù–∞–º –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.

                –ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º".

                """
            ),
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True)]
                ],
                resize_keyboard=True,
            )
        )
        context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=open('privacy_policy.pdf', 'rb'),
            caption='–û—Ç–ø—Ä–∞–≤–ª—è—è –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
            reply_markup=CANCEL_INLINE
        )
        return 'CLIENT'
    return finish_request(redis=redis, update=update, context=context)

def enter_phone(redis: Redis, update: Update, context: CallbackContext) -> str:
    message = redis.get(f'{update.effective_chat.id}_message')
    if not message:
        context.bot.send_message(
            update.effective_chat.id,
            dedent(
                f'''
                –ú–Ω–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å –∏–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è?

                –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å, –æ–ø–∏—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º—É.
                '''
            ),
        )
        return 'CLIENT'
    if not update.message.contact:
        phonenumber = update.message.text
        if phonenumber[0] != '+':
            phonenumber = f'+{phonenumber}'
        try:
            validate_international_phonenumber(phonenumber)
        except ValidationError:
            context.bot.send_message(
                update.effective_chat.id,
                dedent(
                    f'''
                    –ü–æ—Ö–æ–∂—É —á—Ç–æ –≤—ã —Å –æ—à–∏–±–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
                    –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä "{phonenumber}".
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π.
                    '''
                ),
            )
            return 'CLIENT'
    else:
        phonenumber = update.message.contact.phone_number
        if phonenumber[0] != '+':
            phonenumber = f'+{phonenumber}'
    db.update_client_phone(telegram_id=update.effective_chat.id, phonenumber=phonenumber)
    context.bot.send_message(
            update.effective_chat.id,
            '–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
            reply_markup=ReplyKeyboardRemove()
        )
    return finish_request(redis=redis, update=update, context=context)


def finish_request(redis: Redis, update: Update, context: CallbackContext) -> str:
    message = redis.get(f'{update.effective_chat.id}_message')
    db.create_request(telegram_id=update.effective_chat.id, message=message)
    redis.delete(f'{update.effective_chat.id}_message')
    context.bot.send_message(
        update.effective_chat.id,
        dedent(
            f'''
            –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
            –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!
            '''
        ),
        reply_markup=CUSTOMER_INLINE_KEYBOARD
    )
    return 'CLIENT'

@delete_prev_inline
def cancel_new_request(redis: Redis, update: Update, context: CallbackContext) -> str:
    redis.delete(f'{update.effective_chat.id}_message')
    context.bot.send_message(
        update.effective_chat.id,
        text='–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ',
        reply_markup=ReplyKeyboardRemove()
    )
    context.bot.send_message(
        update.effective_chat.id,
        text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é',
        reply_markup=CUSTOMER_INLINE_KEYBOARD
    )
    return 'CLIENT'



class Command(BaseCommand):
    help = "Start Telegram bot"

    def handle(self, *args, **kwargs):

        env = Env()
        env.read_env()

        updater = Updater(token=env.str('TELEGRAM_BOT_TOKEN'), use_context=True)
        redis = Redis(host='localhost', port=6379, db=0, decode_responses=True)

        updater.dispatcher.add_handler(
            ConversationHandler(
                entry_points = [
                    CommandHandler('start', check_access)
                ],
                states = {
                    'VISITOR': [
                        CallbackQueryHandler(new_client, pattern='new_customer'),
                        CallbackQueryHandler(new_contractor, pattern='new_contractor'),
                        CallbackQueryHandler(cancel_new_contractor, pattern='cancel_new_contractor'),
                        CallbackQueryHandler(contractor_salary, pattern='contractor_salary')
                    ],
                    'NEW_CONTRACTOR_FORM': [

                    ],
                    'CLIENT': [
                        MessageHandler(filters=Filters.regex(r'^\+?\d{7,15}$'), callback=partial(enter_phone, redis)),
                        MessageHandler(filters=Filters.contact, callback=partial(enter_phone, redis)),
                        MessageHandler(filters=Filters.text, callback=partial(client_message, redis)),
                        CallbackQueryHandler(new_request, pattern='new_request'),
                        CallbackQueryHandler(partial(cancel_new_request, redis), pattern='cancel_new_request'),
                    ],
                    'CONTRACTOR': [

                    ],
                    'ADMIN': [

                    ]
                },
                fallbacks = [

                ]
            )
        )
        


        updater.start_polling()
        updater.idle()